<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
         http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--
        声明：注册springmvc的核心对象DispatecherServlet
        需要再tomcat服务器启动后，创建DispatcherServlet对象的实例
        为什么要创建DispatcherServlet对象的实例了？
        因为DispatcherServlet在他的实例创建过程中，会同时创建springMVC容器对象
        读取springMVC的配置文件，把这个配置文件的对象都创建好，放入springmvc容器中。
        【容器是个map  类似 map.put("myControlelr",MyController对象)】
        当用户发起请求
        时就可以直接使用对象了。

        servlet的初始化会执行init()方法，DispatcherServlet在init()中{
            //创建容器，读取配置文件
            WebApplicationContext ctx=new ClassPathXmlApplicationContext("springmvc.xml")
            //把容器中的对象放入到ServletContext中
            getServletContext().setAttribute(key,ctx);
        }

        启动tomcat报错：   读取这个文件  /WEB-INF/springmvc-servlet.xml
        springMVC创建容器对象时，读取的配置文件默认是/WEB-INF/【<servlet-name>】-servlet.xml
        不灵活：一般用自定义的
    -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--自定义springMVC读取的配置文件的位置-->
        <init-param>
            <!--springmvc的配置文件的属性-->
            <param-name>contextConfigLocation</param-name>
            <!--指定自定义文件的位置-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup><!--启动时就进行加载-->
    </servlet>
    <servlet-mapping>
        <!--
            使用框架的时候  url-pattern可以使用两种值
            1.  使用扩展名的方式  *.xxx
            2.  使用"/"
        -->
        <servlet-name>springmvc</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
</web-app>